<snippet>
    <content><![CDATA[
struct MaxMatchingRandomized{
    // Maximum matching for general graph 
    // Randomized algorithm in O(V^3)
    // Input is adjacency matrix
  vv32 a;
  int MOD=29989; // prime with p^2 not overflow
  int pow(int a,int b){
    int res=1;
    for(;b>0;b>>=1){
      if((b&1)!=0) res=res*a%MOD;
      a=a*a%MOD;
    }
    return res;
  }
  int rank(){
    int r=0;
    int n=a.size();
    for(int j=0;j<n;++j){
      int k;
      for(k=r;k<n && a[k][j]==0;++k) ;
      if(k==n) continue;
      swap(a[r],a[k]);
      int inv=pow(a[r][j],MOD-2);
      for(int i=j;i<n;++i) a[r][i]=a[r][i]*inv%MOD;
      for(int u=r+1;u<n;++u)
        for(int v=j+1;v<n;++v)
          a[u][v]=(a[u][v]-a[r][v]*a[u][j]%MOD+MOD)%MOD;
      ++r;
    }
    return r;
  }
  int maxMatching(vector<vector<bool> > &d){
    int n=d.size();
    a.assign(n,v32(n,0));
    srand(clock());
    for(int i=0;i<n;++i){
      for(int j=0;j<i;++j){
        if(d[i][j]){
          a[i][j]=rand()%(MOD-1)+1;
          a[j][i]=MOD-a[i][j];
        }
      }
    }
    return rank()/2;
  }
};
]]></content>
    <!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
    <tabTrigger>generalgraphrandommatching</tabTrigger>
    <!-- Optional: Set a scope to limit where the snippet will trigger -->
    <scope></scope>
</snippet>