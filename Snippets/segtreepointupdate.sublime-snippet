<snippet>
    <content><![CDATA[
struct node{
	// Data
	// Default
	node(): {};
};
struct segtree{
	vector<node> T;
	int N;
	void clear(int n){
		N=n;
		T.resize(4*N);
	}
	void merge(const node &a,const node &b,node &c){
		// Merge
	}
	void build(int v,int tl,int tr){
		if(tl==tr){
			// Build T[v]

		}else{
			int tm=(tl+tr)>>1,lf=v<<1,rt=lf^1;;
			build(lf,tl,tm);
			build(rt,tm+1,tr);
			merge(T[lf],T[rt],T[v]); 
		}
	}
	void update(int v,int tl,int tr,int l,int val){
		if(tl==tr){
			// T[v]
		}else{
			int tm=(tl+tr)>>1,lf=v<<1,rt=lf^1;;
			if(l<=mid) update(lf,tl,tm,l,val);
			else update(rt,tm+1,tr,l,val);
			merge(T[lf],T[rt],T[v]);
		}
	}
	node query(int v,int tl,int tr,int l,int r){
		if(l>r){
			return node(); // Return Zero for Data query
		}if(l<=tl && tr<=r){
			return T[v];
		}
		int tm=(tl+tr)>>1,lf=v<<1,rt=lf^1;
		node res;
		merge(query(lf,tl,tm,l,min(r,tm)),query(rt,tm+1,tr,max(l,tm+1),r),res);
		return res;
	}
	int q(int l,int r){
		return query(1,0,N-1,l,r).ans;
	}
	void u(int l,int val){
		update(1,0,N-1,l,val);
	}
} st;
]]></content>
    <!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
    <tabTrigger>segtreepointupdate</tabTrigger>
    <!-- Optional: Set a scope to limit where the snippet will trigger -->
    <scope></scope>
</snippet>